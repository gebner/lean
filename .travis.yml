language: cpp
sudo: true
cache: apt
dist: trusty
addons:
  apt:
    sources: &apt_sources
      - ubuntu-toolchain-r-test
      - sourceline: 'ppa:kalakris/cmake'
      - sourceline: 'ppa:h-rayflood/llvm'
    packages: &default_packages
      - cmake
      - libgmp-dev
      - libmpfr-dev
      - libgoogle-perftools-dev
      - g++-4.9
      - clang-3.4
      - lcov
      - valgrind
      - python-pip
env:
  global:
   # GH_TOKEN=[secure]             (to push to osx/windows repo under soonhokong)
   - secure: "bDcZ1BusPgeFcilXBXqJ+aLWmCD6ET6SY6GaIDz66zFFVvHULkr8PcGQgKHw/VxH4Kbll52hkKwYgKhXyBF+VlHiyAxQHzlr17honzIl42vbz+tC5qr4/oDASolqayUtz9xJqNOFbTwvh5EHZLbG5hjudSdGE8LX3QC6IN7wYy8="
   # DROPBOX_KEY=[secure]          (to send binaries to dropbox, "access_token")
   - secure: "CyASf1F7hGwB85jUQOfDoNBQSouSayP4BVvjqAJdRxirui/oyw2sJ02HC6ZTM+LO+ZyWy3eJOGwe81z6PEQFzovv9C8VLRbhV8Tk7aN+nQTCyyKLoxsON/T5PO/C74ZSu5hTNMwnHrbdphc88Y4ZrQqL2M3cTWT5nVFCshEq6IM="
   # REPO=BLESSED                  (to perform extra stuff only for pushes to the blessed repo)
   - secure: "iZEcYPaxqGRQs7loHwO88DlewbRngBwoNGfo438jabh0adF3y9zCPw0tcAtp6IJuCw8E6QVoM9JMwoQRvPbnqBelFjpXH+U3eYdaeeZRkBkyOthTWzzdwEexlnK7dXVEc+gTDjh2NBD9juXKDSJ5xOF1HfhEJaMXSLairnhpL6k="

matrix:
  include:
   # =======================================================
   # TESTCOV Build
   # =======================================================
   # TC. g++-4.9      | DEBUG
   - os: linux
     env:
       CMAKE_CXX_COMPILER=g++-4.9
       CMAKE_BUILD_TYPE=Debug
       TESTCOV=OFF
       CONSERVE_MEMORY=ON
   # =======================================================
   # RELEASE Build
   # =======================================================
   # R1. clang++-3.4 | RELEASE | TCMALLOC        | CDASH
   - os: linux
     env:
       CMAKE_CXX_COMPILER=clang++-3.4
       CMAKE_BUILD_TYPE=Release
       TCMALLOC=ON
   # R2. g++-4.9     | RELEASE | TCMALLOC        | CDASH + UPLOAD=>DROPBOX
   - os: linux
     addons:
       apt:
         sources: *apt_sources
         packages:
           - *default_packages
           - g++-6
     env:
       CMAKE_CXX_COMPILER=g++-6
       CMAKE_BUILD_TYPE=Release
       TCMALLOC=ON
       UPLOAD=linux_tcmalloc
       PACKAGE=TRUE
       CONSERVE_MEMORY=ON
   # R3. clang++-3.4 | RELEASE
   - os: linux
     env:
       CMAKE_CXX_COMPILER=clang++-3.4
       CMAKE_BUILD_TYPE=Release
   # R4. g++-4.9    | RELEASE                    | UPLOAD=>DROPBOX
   - os: linux
     addons:
       apt:
         sources: *apt_sources
         packages:
           - *default_packages
           - g++-6
     env:
       CMAKE_CXX_COMPILER=g++-6
       CMAKE_BUILD_TYPE=Release
       UPLOAD=linux
       CONSERVE_MEMORY=ON
   # =======================================================
   # DEBUG Build
   # =======================================================
   # D1. clang++-3.4  | DEBUG   | TCMALLOC
   - os: linux
     env:
       CMAKE_CXX_COMPILER=clang++-3.4
       CMAKE_BUILD_TYPE=Debug
       TCMALLOC=ON
   # D2. g++-4.9     | DEBUG    | TCMALLOC
   - os: linux
     env:
       CMAKE_CXX_COMPILER=g++-4.9
       CMAKE_BUILD_TYPE=Debug
       TCMALLOC=ON
       CONSERVE_MEMORY=ON
   # D3. clang++-3.4 | DEBUG
   - os: linux
     env:
       CMAKE_CXX_COMPILER=clang++-3.4
       CMAKE_BUILD_TYPE=Debug
   # D4. g++-4.9     | DEBUG
   - os: linux
     dist: precise
     env:
       CMAKE_CXX_COMPILER=g++-4.9
       CMAKE_BUILD_TYPE=Debug
       CONSERVE_MEMORY=ON
   # =======================================================
   # OS X Build
   # =======================================================
   - os: osx
     env:
       CMAKE_CXX_COMPILER=clang++
       CMAKE_BUILD_TYPE=Release
       UPLOAD=osx
       PACKAGE=TRUE
   - os: osx
     env:
       CMAKE_CXX_COMPILER=g++
       CMAKE_BUILD_TYPE=Debug

before_install:
  - if [[ $TRAVIS_OS_NAME == osx ]]; then
      brew update &&
      brew install gcc &&
      brew install gmp &&
      brew install mpfr;
    fi
  - if [[ $REPO == BLESSED && $UPLOAD ]]; then
       sudo pip install dropbox;
    fi

script:
  - mkdir -p build
  - cd build
  - if [[ $TESTCOV != ON ]]; then TESTCOV=OFF; fi
  - if [[ $TCMALLOC != ON ]]; then TCMALLOC=OFF; fi
  - cmake -DCONSERVE_MEMORY=${CONSERVE_MEMORY} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DTESTCOV=${TESTCOV} -DTCMALLOC=${TCMALLOC} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} ../src
  - SITE=travis-${TRAVIS_OS_NAME} &&
    BUILD_NAME=${TRAVIS_BRANCH}_${CMAKE_CXX_COMPILER}_${CMAKE_BUILD_TYPE} &&
    if [[ $TCMALLOC == ON ]]; then BUILD_NAME=${BUILD_NAME}_TC; fi &&
    CONFIG_FILE=DartConfiguration.tcl &&
    sed -i "s/^Site:.*/Site:$SITE/" $CONFIG_FILE &&
    sed -i "s/BuildName:.*/BuildName:$BUILD_NAME/" $CONFIG_FILE
  - make -j2
  - if [[ $CMAKE_BUILD_TYPE == Release ]]; then
      yes "C" | ctest -j2 -D ExperimentalTest -V;
    fi
  - if [[ $PACKAGE == TRUE ]]; then
       make package;
    fi
  - cd ..

after_script:
- if [[ $REPO == BLESSED && $UPLOAD ]]; then
      UPLOAD_DIR=bin &&
      BINARY=lean_${UPLOAD} &&
      NOW=`TZ='America/Los_Angeles' date +"%Y%m%d_%H%M"` &&
      GIT_COMMIT=`git log --oneline -n 1 | cut -d ' ' -f 1` &&
      OS=${TRAVIS_OS_NAME} &&
      ARCHIVE_BINARY=${NOW}_${TRAVIS_BRANCH}_${GIT_COMMIT}_${OS}_${CMAKE_CXX_COMPILER}_${CMAKE_BUILD_TYPE} &&
      if [[ $TCMALLOC == ON ]]; then
          ARCHIVE_BINARY=${ARCHIVE_BINARY}_tcmalloc
      fi &&
      mkdir ${UPLOAD_DIR} &&
      if [[ $REPO == BLESSED && $PACKAGE == TRUE ]]; then
          cp -v build/lean*.tar.gz ${UPLOAD_DIR}/
      fi &&
      cp -v build/shell/lean ${UPLOAD_DIR}/${BINARY} &&
      tar cvfz ${UPLOAD_DIR}/${ARCHIVE_BINARY}.tar.gz ${UPLOAD_DIR}/${BINARY} &&
      script/dropbox_upload.py --srcpath ${UPLOAD_DIR} --destpath /Public/${UPLOAD_DIR} --dropbox-token ${DROPBOX_KEY};
  fi
- if [[ $REPO == BLESSED && $TESTCOV == ON ]]; then
     ctest -D ExperimentalCoverage &&
     make cov &&
     npm install coveralls --save &&
     cat coverage.info.cleaned | ./node_modules/coveralls/bin/coveralls.js;
  fi
- if [[ $MEMCHECK == TRUE ]]; then
     MEMCHECK_SUPP=`readlink -f ../src/memcheck.supp` &&
     CONFIG_FILE=DartConfiguration.tcl &&
     sed -i "s,^MemoryCheckSuppressionFile:\W*$,MemoryCheckSuppressionFile:$MEMCHECK_SUPP," $CONFIG_FILE &&
     ulimit -s unlimited &&
     yes "C" | ctest -D ExperimentalMemCheck -LE expensive -V -I $MEMCHECK_RANGE;
  fi
- if [[ $REPO == BLESSED ]]; then
      GIT_COMMIT=`git log --oneline -n 1 | cut -d ' ' -f 1` &&
      GIT_SUBJECT=`git log --oneline -n 1 | cut -d ' ' -f 2-` &&
      GIT_SUBJECT=${GIT_SUBJECT//\"/\\\"} &&
      GIT_SUBJECT=${GIT_SUBJECT//,/\,} &&
      GIT_SUBJECT=$(echo -e $(printf '%q' "$GIT_SUBJECT")) &&
      find Testing -name "*.xml" -exec sed -i "s,Generator=\".*\",Generator=\"${GIT_COMMIT}###${GIT_SUBJECT}\"," {} ";" &&
      find Testing \( -name "LastTest_*.log" -o -name "LastDynamicAnalysis_*.log" \) -exec sh -c 'TMP=`mktemp /tmp/ctesttmp_XXXX`; ../script/demangle_cpptype.py {} > $TMP; mv -v $TMP {}' ";" &&
      ctest -D ExperimentalSubmit;
  fi

notifications:
  email:
    recipients:
     - lean-build@googlegroups.com
    on_success: change
    on_failure: always
